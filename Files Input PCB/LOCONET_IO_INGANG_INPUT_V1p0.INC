
;***************************************************************************
;* LocoNet In/out module met PIC 18F4620 microcontroller                   *
;* Datum: 28 FEB 2021                   Versie LOCONET INPUT V1.0          *
;*                                                                         *
;* Filenaam: LOCONET_IO_INGANG_INPUT_V1p0.INC                              *
;*                                                                         *
;***************************************************************************


;elke ingang werkt via massadetectie met softwarematige ontstoring en schmitt-trigger  

	#DEFINE C_LAAG 64	;onderste grens waarbij massa detectie wegvalt : teller 255 --> 0  (schmitt-trigger)
	#DEFINE C_HOOG 192	;bovenste grens waarbij massa detectie inkomt teller 0 --> 255  (schmitt-trigger)
	#DEFINE OPC_SW_REQ 0xB0
	#DEFINE OPC_INPUT_REP 0xB2
	
;	

	
;STATUS_M bit0 =1 MASSA DETECTIE   =0 GEEN MASSA DETECTIE
;         bit1 = togle gebruikt bij DIP9-10 = 'OFF' 'ON'


MACRO_INGANG	MACRO INPUT_NR_M, COUNTER_M, STATUS_M, POORT_IN_M, POORT_IN_BIT_M
	
	
	LOCAL M_END, M_SPR_MASSA, M_SEND_DATA, M_SPR1, M_SPR2, M_SPR3, M_SPR4

;+5V
	
	BTFSS POORT_IN_M,POORT_IN_BIT_M	    	;indien geen massa 
	GOTO M_SPR_MASSA
	
	MOVF COUNTER_M,W			;   als COUNTER = 0 dan doe niets
	BTFSC STATUS,Z
	GOTO M_END
	DECF COUNTER_M,F			;   anders verlaag COUNTER
	MOVF COUNTER_M,W
	XORLW C_LAAG				;   is COUNTER = C_LAAG dan reset STATUS bit0 en send data
	BTFSS STATUS,Z
	GOTO M_END
	BCF STATUS_M,0
		
	GOTO M_SEND_DATA
	
;MASSA

M_SPR_MASSA					;indien wel massa 

	INCFSZ COUNTER_M,F			;   verhoog COUNTER tot 255
	BRA M_SPR4
	DECF COUNTER_M
	GOTO M_END
M_SPR4	
	MOVF COUNTER_M,W			;    als COUNTER = C_HOOG dan set STATUS bit0 en send data
	XORLW C_HOOG
	BTFSS STATUS,Z
	GOTO M_END
	BSF STATUS_M,0
	BTG STATUS_M,1
	

M_SEND_DATA	

	BTFSS DIP9	    ;als DIP9='OFF' en DIP10='OFF' dan OPC_INPUT_REP anders OPC_SW_REQ
	GOTO M_SPR1
	BTFSS DIP10
	GOTO M_SPR1
	
;is selectie = OPC_INPUT_REP
;IN1 = '0,A6,A5,A4,A3,A2,A1,A0'
;      '              A2,A1,A0' = (INPUT_NR_M-1) SHIFT RIGHT
;      '           A3         ' = INV ADDRESS1
;      '        A4            ' = INV ADDRESS2
;      '     A5               ' = INV ADDRESS3
;      '  A6                  ' = INV ADDRESS4
	
;IN2 = '0,X,I,L,A10,A9,A8,A7'   
;      '                  A7'   = INV ADDRESS5
;      '               A8   '   = INV ADDRESS6
;      '            A9      '   = INV ADDRESS7
;      '        A10         '   = INV ADDRESS8
;      '      L             '   = STATUS_M bit0
;      '    I               '   = (INPUT_NR_M-1) bit0

	CLRF TE_VERZENDEN_BYTE3
	MOVLW OPC_INPUT_REP
	MOVWF TE_VERZENDEN_BYTE1
	BCF STATUS,C
	MOVLW INPUT_NR_M-1
	MOVWF TE_VERZENDEN_BYTE2
	RRCF TE_VERZENDEN_BYTE2,F
	BTFSC STATUS,C
	BSF TE_VERZENDEN_BYTE3,5
	BTFSS ADDRESS1
	BSF TE_VERZENDEN_BYTE2,3
	BTFSS ADDRESS2
	BSF TE_VERZENDEN_BYTE2,4
	BTFSS ADDRESS3
	BSF TE_VERZENDEN_BYTE2,5
	BTFSS ADDRESS4
	BSF TE_VERZENDEN_BYTE2,6
	BTFSS ADDRESS5
	BSF TE_VERZENDEN_BYTE3,0
	BTFSS ADDRESS6
	BSF TE_VERZENDEN_BYTE3,1
	BTFSS ADDRESS7
	BSF TE_VERZENDEN_BYTE3,2
	BTFSS ADDRESS8
	BSF TE_VERZENDEN_BYTE3,3
	BTFSC STATUS_M,0
	BSF TE_VERZENDEN_BYTE3,4
	CALL TE_VERZENDEN_BYTES_IN_BUFFER
	
	BTFSC STATUS_M,0
	BRA $+10
	BCF LED5	    ;als overgang naar +5V dan laat LED5 0,2s oplichten
	MOVLW 12
	MOVWF TEL_LED5
	GOTO M_END
	BCF LED4	    ;als overgang naar massa dan laat LED4 0,2s oplichten
	MOVLW 12
	MOVWF TEL_LED4
	GOTO M_END
	
;is selectie OPC_SW_REQ 


;SW1 = '0,A6,A5,A4,A3,A2,A1,A0'
	
;Als DIP9-10='ON' 'ON'
;                     A2,A1,A0' = INPUT_NR_M-1 SHIFT RIGHT
;                  A3         ' = INV DIP11
;anders 	
;      '           A3,A2,A1,A0' = INPUT_NR_M-1
;      '        A4            ' = INV ADDRESS1
;      '     A5               ' = INV ADDRESS2
;      '  A6                  ' = INV ADDRESS3
	
;SW2 = '0,0,DIR,ON,A10,A9,A8,A7'
;      '                     A7' = INV ADDRESS4
;      '                  A8   ' = INV ADDRESS5
;      '               A9      ' = INV ADDRESS6
;      '           A10         ' = INV ADDRESS7
	
;Als DIP9-10 ='ON' 'ON'
;      '       ON              ' = STATUS_M bit0
;      '    DIR                ' = INPUT_NR_M-1 bit0
;anders Als DIP10 ='OFF' dan	
;      '        ON             ' = 1
;      '    DIR                ' = STATUS_M bit0
	
;         anders 
;      '        ON             ' = STATUS_M bit0
;      '    DIR                ' = STATUS_M bit1
	

M_SPR1   
	
	CLRF TE_VERZENDEN_BYTE3
	MOVLW OPC_SW_REQ
	MOVWF TE_VERZENDEN_BYTE1
	
				;DIP9-10 ='ON' 'ON'
	BTFSC DIP9
	GOTO M_SPR3
	BTFSC DIP10
	GOTO M_SPR3
	
	BCF STATUS,C
	MOVLW INPUT_NR_M-1
	MOVWF TE_VERZENDEN_BYTE2
	RRCF TE_VERZENDEN_BYTE2,F
	BTFSS DIP11
	BSF TE_VERZENDEN_BYTE2,3
	BTFSS ADDRESS1
	BSF TE_VERZENDEN_BYTE2,4
	BTFSS ADDRESS2
	BSF TE_VERZENDEN_BYTE2,5
	BTFSS ADDRESS3
	BSF TE_VERZENDEN_BYTE2,6
	BTFSS ADDRESS4
	BSF TE_VERZENDEN_BYTE3,0
	BTFSS ADDRESS5
	BSF TE_VERZENDEN_BYTE3,1
	BTFSS ADDRESS6
	BSF TE_VERZENDEN_BYTE3,2
	BTFSS ADDRESS7
	BSF TE_VERZENDEN_BYTE3,3
	BTFSC STATUS_M,0
	BSF TE_VERZENDEN_BYTE3,4
	MOVLW INPUT_NR_M-1
	BTFSS WREG,0
	BSF TE_VERZENDEN_BYTE3,5
	CALL TE_VERZENDEN_BYTES_IN_BUFFER
	
	BTFSS STATUS_M,0
	GOTO M_END
	MOVLW INPUT_NR_M-1
	BTFSC WREG,0
	BRA $+10
	BCF LED5
	MOVLW 12
	MOVWF TEL_LED5
	GOTO M_END
	BCF LED4
	MOVLW 12
	MOVWF TEL_LED4
	GOTO M_END	
	
M_SPR3	
	
	MOVLW INPUT_NR_M-1
	MOVWF TE_VERZENDEN_BYTE2
	BTFSS ADDRESS1
	BSF TE_VERZENDEN_BYTE2,4
	BTFSS ADDRESS2
	BSF TE_VERZENDEN_BYTE2,5
	BTFSS ADDRESS3
	BSF TE_VERZENDEN_BYTE2,6
	BTFSS ADDRESS4
	BSF TE_VERZENDEN_BYTE3,0
	BTFSS ADDRESS5
	BSF TE_VERZENDEN_BYTE3,1
	BTFSS ADDRESS6
	BSF TE_VERZENDEN_BYTE3,2
	BTFSS ADDRESS7
	BSF TE_VERZENDEN_BYTE3,3
	
	BTFSS DIP10
	GOTO M_SPR2
	BSF TE_VERZENDEN_BYTE3,4
	BTFSC STATUS_M,0
	BSF TE_VERZENDEN_BYTE3,5
	CALL TE_VERZENDEN_BYTES_IN_BUFFER
	
	BTFSC STATUS_M,0
	BRA $+10
	BCF LED5	    ;als overgang naar +5V dan laat LED5 0,2s oplichten
	MOVLW 12
	MOVWF TEL_LED5
	GOTO M_END
	BCF LED4	    ;als overgang naar massa dan laat LED4 0,2s oplichten
	MOVLW 12
	MOVWF TEL_LED4
	GOTO M_END
	
	
M_SPR2	
	BTFSC STATUS_M,0
	BSF TE_VERZENDEN_BYTE3,4
	BTFSC STATUS_M,1
	BSF TE_VERZENDEN_BYTE3,5
	CALL TE_VERZENDEN_BYTES_IN_BUFFER
	
	MOVLW INPUT_NR_M-1	;opslaan in EEPROM
	MOVWF EEADR
	MOVF STATUS_M,W
	MOVWF EEDATA
	CALL COPY_NAAR_EEPROM
	
	BTFSS STATUS_M,0
	BRA M_END
	BTFSC STATUS_M,1
	BTFSC WREG,0
	BRA $+10
	BCF LED5
	MOVLW 12
	MOVWF TEL_LED5
	GOTO M_END
	BCF LED4
	MOVLW 12
	MOVWF TEL_LED4	
		
M_END
	
    ENDM
	
	
	
TEST_INGANG
    
    MOVLW .4
    MOVWF AANTAL_BYTES
	
     MACRO_INGANG .1, COUNTER_INPUT1, STATUS_INPUT1, POORT1
    MACRO_INGANG .2, COUNTER_INPUT2, STATUS_INPUT2, POORT2
    MACRO_INGANG .3, COUNTER_INPUT3, STATUS_INPUT3, POORT3
    MACRO_INGANG .4, COUNTER_INPUT4, STATUS_INPUT4, POORT4

    MACRO_INGANG .5, COUNTER_INPUT5, STATUS_INPUT5, POORT5
    MACRO_INGANG .6, COUNTER_INPUT6, STATUS_INPUT6, POORT6
    MACRO_INGANG .7, COUNTER_INPUT7, STATUS_INPUT7, POORT7
    MACRO_INGANG .8, COUNTER_INPUT8, STATUS_INPUT8, POORT8
    MACRO_INGANG .9, COUNTER_INPUT9, STATUS_INPUT9, POORT9
    MACRO_INGANG .10, COUNTER_INPUT10, STATUS_INPUT10, POORT10
    MACRO_INGANG .11, COUNTER_INPUT11, STATUS_INPUT11, POORT11
    MACRO_INGANG .12, COUNTER_INPUT12, STATUS_INPUT12, POORT12
    MACRO_INGANG .13, COUNTER_INPUT13, STATUS_INPUT13, POORT13
    MACRO_INGANG .14, COUNTER_INPUT14, STATUS_INPUT14, POORT14
    
    IF DEBUGGER == 0 
	  MACRO_INGANG .15, COUNTER_INPUT15, STATUS_INPUT15, POORT15
	  MACRO_INGANG .16, COUNTER_INPUT16, STATUS_INPUT16, POORT16
    ENDIF

    	RETURN
 